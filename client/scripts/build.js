const jetpack = require('fs-jetpack');
const rollup = require('rollup').rollup;
const less = require('rollup-plugin-less');
const buble = require('rollup-plugin-buble');
const cjs = require('rollup-plugin-commonjs');
const istanbul = require('rollup-plugin-istanbul');
const resolve = require('rollup-plugin-node-resolve');
const pkg = require('../package.json');
const builtins = require('./builtins.json');

// Files that specific plugins shouldn't touch
const exclude = ['node_modules/**', '**/*.spec.js*', '**/*.autogenerated', '**/*.less'];

// Modules that don't need to/shouldn't be bundled
const externalAll = Object.keys(pkg.dependencies).concat(builtins);

const externalDev = externalAll.concat(Object.keys(pkg.devDependencies));

const pluginsAll = [
  less({
    output: 'app/stylesheets/main.css'
  }),
  buble({ target: { chrome: 50 } }),
  resolve({
    main: true,
    jsnext: true,
    browser: true
  }),
  cjs({
    exclude: 'node_modules/process-es6/**',
    include: [
    // If a plugin reports "default is not exported"
    // Add it here
      'node_modules/fbjs/**',
      'node_modules/lokijs/**',
      'node_modules/minimist/**',
      'node_modules/object-assign/**',
      'node_modules/react/**'
    ]
  }),
];

let cache;

// Creates a master file for tests
function generateSpecFile() {
  const files = jetpack.cwd('src').find('.', { matching: '*.spec.js*' });
  const output = files.map((path) => {
    const new_path = path.replace(/\\/g, '/');
    return `import './${new_path}';`;
  }).join('\n');
  jetpack.cwd('src').write('specs.js.autogenerated', output);
}

// Rolls up <fileName> from src and puts it in app folder
function compile(fileName, external, plugins) {
  rollup({
    entry: `src/${fileName}`,
    external,
    plugins,
    cache
  }).then(bundle => bundle.write({
    dest: `app/${fileName}`,
    format: 'cjs',
    sourceMap: true
  }));
}

// Unit Tests
generateSpecFile();
compile('specs.js.autogenerated', externalDev, pluginsAll.concat([istanbul({
  exclude,
})]));

// App
compile('app.js', externalAll, pluginsAll);

// Background
compile('background.js', externalAll, pluginsAll);
